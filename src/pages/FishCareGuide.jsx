import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Helmet } from 'react-helmet';
import { BookOpen, Fish, Droplets, Utensils, Calendar, AlertTriangle } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useToast } from '@/components/ui/use-toast';

const FishCareGuide = () => {
  const [selectedGuide, setSelectedGuide] = useState(null);
  const { toast } = useToast();

  const fishGuides = [
    {
      id: 1,
      name: 'рж░рзБржЗ ржорж╛ржЫ ржЪрж╛рж╖',
      icon: 'ЁЯРЯ',
      description: 'рж░рзБржЗ ржорж╛ржЫрзЗрж░ рж╕ржорзНржкрзВрж░рзНржг ржЪрж╛рж╖ ржкржжрзНржзрждрж┐',
      details: {
        introduction: 'рж░рзБржЗ ржорж╛ржЫ ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржЕржирзНржпрждржо ржЬржиржкрзНрж░рж┐ржпрж╝ ржорж╛ржЫред ржПржЯрж┐ ржжрзНрж░рзБржд ржмрзГржжрзНржзрж┐ ржкрж╛ржпрж╝ ржПржмржВ ржмрж╛ржЬрж╛рж░рзЗ ржнрж╛рж▓рзЛ ржжрж╛ржо ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ред',
        requirements: [
          'ржкрзБржХрзБрж░рзЗрж░ ржЧржнрзАрж░рждрж╛ рзк-рзм ржлрзБржЯ',
          'ржкрж╛ржирж┐рж░ рждрж╛ржкржорж╛рждрзНрж░рж╛ рзирзл-рзйрзж ржбрж┐ржЧрзНрж░рж┐ рж╕рзЗрж▓рж╕рж┐ржпрж╝рж╛рж╕',
          'pH рзн-рзо.рзл',
          'ржжрзНрж░ржмрзАржнрзВржд ржЕржХрзНрж╕рж┐ржЬрзЗржи рзл ppm ржПрж░ ржмрзЗрж╢рж┐'
        ],
        feeding: [
          'ржкрзНрж░рж╛ржХрзГрждрж┐ржХ ржЦрж╛ржмрж╛рж░: ржлрж╛ржЗржЯрзЛржкрзНрж▓рзНржпрж╛ржЩрзНржХржЯржи, ржЬрзБржкрзНрж▓рзНржпрж╛ржЩрзНржХржЯржи',
          'рж╕ржорзНржкрзВрж░ржХ ржЦрж╛ржмрж╛рж░: ржЪрж╛рж▓рзЗрж░ ржХрзБржБржбрж╝рж╛, рж╕рж░рж┐рж╖рж╛рж░ ржЦрзИрж▓',
          'ржжрзИржирж┐ржХ рзи-рзй% рж╣рж╛рж░рзЗ ржЦрж╛ржмрж╛рж░ ржжрж┐ржи',
          'ржжрж┐ржирзЗ рзи-рзй ржмрж╛рж░ ржЦрж╛ржмрж╛рж░ ржжрж┐ржи'
        ],
        harvesting: 'рж╕рж╛ржзрж╛рж░ржгржд рзо-рззрзж ржорж╛рж╕рзЗ рзорзжрзж-рззрзирзжрзж ржЧрзНрж░рж╛ржо ржУржЬржирзЗ ржЖрж╣рж░ржг ржХрж░рж╛ ржпрж╛ржпрж╝ред',
        problems: [
          'EUS рж░рзЛржЧ: ржкрж╛ржирж┐рж░ ржЧрзБржгржорж╛ржи ржнрж╛рж▓рзЛ рж░рж╛ржЦрзБржи',
          'ржЧрзНржпрж╛рж╕ рж░рзЛржЧ: ржирж┐ржпрж╝ржорж┐ржд ржЪрзБржи ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рзБржи',
          'ржкрж░ржЬрзАржмрзА ржЖржХрзНрж░ржоржг: рж▓ржмржг ржкрж╛ржирж┐ ржжрж┐ржпрж╝рзЗ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржХрж░рзБржи'
        ]
      }
    },
    {
      id: 2,
      name: 'рждрзЗрж▓рж╛ржкрж┐ржпрж╝рж╛ ржЪрж╛рж╖',
      icon: 'ЁЯРа',
      description: 'рждрзЗрж▓рж╛ржкрж┐ржпрж╝рж╛ ржорж╛ржЫрзЗрж░ ржЖржзрзБржирж┐ржХ ржЪрж╛рж╖ ржкржжрзНржзрждрж┐',
      details: {
        introduction: 'рждрзЗрж▓рж╛ржкрж┐ржпрж╝рж╛ ржПржХржЯрж┐ ржжрзНрж░рзБржд ржмрж░рзНржзржирж╢рзАрж▓ ржорж╛ржЫ ржпрж╛ ржХржо ржЦрж░ржЪрзЗ ржЪрж╛рж╖ ржХрж░рж╛ ржпрж╛ржпрж╝ ржПржмржВ рж░рзЛржЧ ржкрзНрж░рждрж┐рж░рзЛржз ржХрзНрж╖ржорждрж╛ ржмрзЗрж╢рж┐ред',
        requirements: [
          'ржкрзБржХрзБрж░рзЗрж░ ржЧржнрзАрж░рждрж╛ рзй-рзл ржлрзБржЯ',
          'ржкрж╛ржирж┐рж░ рждрж╛ржкржорж╛рждрзНрж░рж╛ рзирзи-рзйрзи ржбрж┐ржЧрзНрж░рж┐ рж╕рзЗрж▓рж╕рж┐ржпрж╝рж╛рж╕',
          'pH рзм.рзл-рзо.рзл',
          'рж╕рзНржЯржХрж┐ржВ ржбрзЗржирж╕рж┐ржЯрж┐ рзлрзжрзжрзж-рзорзжрзжрзж ржкрж┐рж╕/ржПржХрж░'
        ],
        feeding: [
          'ржкрзНрж░рзЛржЯрж┐ржи рзирзо-рзйрзи%',
          'ржнрж╛рж╕ржорж╛ржи ржЦрж╛ржмрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи',
          'ржжрзИржирж┐ржХ рзй-рзл% рж╣рж╛рж░рзЗ ржЦрж╛ржмрж╛рж░ ржжрж┐ржи',
          'ржжрж┐ржирзЗ рзй-рзк ржмрж╛рж░ ржЦрж╛ржмрж╛рж░ ржжрж┐ржи'
        ],
        harvesting: 'рзл-рзм ржорж╛рж╕рзЗ рзирзлрзж-рзкрзжрзж ржЧрзНрж░рж╛ржо ржУржЬржирзЗ ржЖрж╣рж░ржг ржХрж░рж╛ ржпрж╛ржпрж╝ред',
        problems: [
          'рж╕рзНржЯрзНрж░рзЗржкрзНржЯрзЛржХржХрзНржХрж╛рж╕: ржЕрзНржпрж╛ржирзНржЯрж┐ржмрж╛ржпрж╝рзЛржЯрж┐ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи',
          'ржлрзНрж▓рзЗржХрзНрж╕: ржкрж╛ржирж┐рж░ ржЧрзБржгржорж╛ржи ржЙржирзНржиржд ржХрж░рзБржи',
          'ржЕрждрж┐рж░рж┐ржХрзНржд ржкрзНрж░ржЬржиржи: ржоржирзЛрж╕рзЗржХрзНрж╕ ржкрзЛржирж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи'
        ]
      }
    },
    {
      id: 3,
      name: 'ржкрж╛ржЩрзНржЧрж╛рж╕ ржЪрж╛рж╖',
      icon: 'ЁЯРб',
      description: 'ржкрж╛ржЩрзНржЧрж╛рж╕ ржорж╛ржЫрзЗрж░ ржмрж╛ржгрж┐ржЬрзНржпрж┐ржХ ржЪрж╛рж╖',
      details: {
        introduction: 'ржкрж╛ржЩрзНржЧрж╛рж╕ ржПржХржЯрж┐ ржЕрждрзНржпржирзНржд рж▓рж╛ржнржЬржиржХ ржорж╛ржЫ ржпрж╛ ржжрзНрж░рзБржд ржмрзГржжрзНржзрж┐ ржкрж╛ржпрж╝ ржПржмржВ ржмрж╛ржЬрж╛рж░рзЗ ржнрж╛рж▓рзЛ ржЪрж╛рж╣рж┐ржжрж╛ рж░ржпрж╝рзЗржЫрзЗред',
        requirements: [
          'ржкрзБржХрзБрж░рзЗрж░ ржЧржнрзАрж░рждрж╛ рзо-рззрзи ржлрзБржЯ',
          'ржкрж╛ржирж┐рж░ рждрж╛ржкржорж╛рждрзНрж░рж╛ рзирзм-рзйрзж ржбрж┐ржЧрзНрж░рж┐ рж╕рзЗрж▓рж╕рж┐ржпрж╝рж╛рж╕',
          'pH рзм.рзл-рзо.рзж',
          'рж╕рзНржЯржХрж┐ржВ ржбрзЗржирж╕рж┐ржЯрж┐ рзирзлрзжрзжрзж-рзйрзжрзжрзжрзж ржкрж┐рж╕/ржПржХрж░'
        ],
        feeding: [
          'ржкрзНрж░рзЛржЯрж┐ржи рзирзо-рзйрзж%',
          'ржнрж╛рж╕ржорж╛ржи ржЦрж╛ржмрж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржи',
          'ржжрзИржирж┐ржХ рзи-рзк% рж╣рж╛рж░рзЗ ржЦрж╛ржмрж╛рж░ ржжрж┐ржи',
          'ржжрж┐ржирзЗ рзк-рзл ржмрж╛рж░ ржЦрж╛ржмрж╛рж░ ржжрж┐ржи'
        ],
        harvesting: 'рзм-рзо ржорж╛рж╕рзЗ рзорзжрзж-рззрзирзжрзж ржЧрзНрж░рж╛ржо ржУржЬржирзЗ ржЖрж╣рж░ржг ржХрж░рж╛ ржпрж╛ржпрж╝ред',
        problems: [
          'ржмрзНржпрж╛ржХржЯрзЗрж░рж┐ржпрж╝рж╛рж▓ ржЗржиржлрзЗржХрж╢ржи: ржкрж╛ржирж┐ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзБржи',
          'ржнрж╛ржЗрж░рж╛рж▓ рж░рзЛржЧ: ржЬрзИржм ржирж┐рж░рж╛ржкрждрзНрждрж╛ ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрзБржи',
          'ржкрж╛ржирж┐рж░ ржжрзВрж╖ржг: ржирж┐ржпрж╝ржорж┐ржд ржкрж╛ржирж┐ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи'
        ]
      }
    },
    {
      id: 4,
      name: 'ржХрзИ ржорж╛ржЫ ржЪрж╛рж╖',
      icon: 'ЁЯОг',
      description: 'ржХрзИ ржорж╛ржЫрзЗрж░ рж▓рж╛ржнржЬржиржХ ржЪрж╛рж╖ ржкржжрзНржзрждрж┐',
      details: {
        introduction: 'ржХрзИ ржорж╛ржЫ ржЕрждрзНржпржирзНржд ржкрзБрж╖рзНржЯрж┐ржХрж░ ржПржмржВ рж░рзЛржЧрзАржжрзЗрж░ ржЬржирзНржп ржЙржкржХрж╛рж░рзАред ржПржЯрж┐ ржХржо ржЕржХрзНрж╕рж┐ржЬрзЗржирзЗржУ ржмрзЗржБржЪрзЗ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗред',
        requirements: [
          'ржкрзБржХрзБрж░рзЗрж░ ржЧржнрзАрж░рждрж╛ рзй-рзк ржлрзБржЯ',
          'ржкрж╛ржирж┐рж░ рждрж╛ржкржорж╛рждрзНрж░рж╛ рзирзк-рзйрзж ржбрж┐ржЧрзНрж░рж┐ рж╕рзЗрж▓рж╕рж┐ржпрж╝рж╛рж╕',
          'pH рзм.рзл-рзо.рзж',
          'рж╕рзНржЯржХрж┐ржВ ржбрзЗржирж╕рж┐ржЯрж┐ рззрзжрзжрзжрзж-рззрзлрзжрзжрзж ржкрж┐рж╕/ржПржХрж░'
        ],
        feeding: [
          'ржкрзНрж░рзЛржЯрж┐ржи рзйрзж-рзйрзл%',
          'ржбрзБржмржирзНржд ржЦрж╛ржмрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи',
          'ржжрзИржирж┐ржХ рзй-рзл% рж╣рж╛рж░рзЗ ржЦрж╛ржмрж╛рж░ ржжрж┐ржи',
          'ржжрж┐ржирзЗ рзи-рзй ржмрж╛рж░ ржЦрж╛ржмрж╛рж░ ржжрж┐ржи'
        ],
        harvesting: 'рзк-рзл ржорж╛рж╕рзЗ рззрзлрзж-рзирзлрзж ржЧрзНрж░рж╛ржо ржУржЬржирзЗ ржЖрж╣рж░ржг ржХрж░рж╛ ржпрж╛ржпрж╝ред',
        problems: [
          'EUS рж░рзЛржЧ: ржкржЯрж╛рж╢рж┐ржпрж╝рж╛ржо ржкрж╛рж░ржорзНржпрж╛ржЩрзНржЧрж╛ржирзЗржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи',
          'ржлрзБрж▓ржХрж╛ ржкржЪрж╛ рж░рзЛржЧ: рж▓ржмржг ржкрж╛ржирж┐ ржжрж┐ржпрж╝рзЗ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржХрж░рзБржи',
          'ржкрзЗржЯ ржлрзЛрж▓рж╛ рж░рзЛржЧ: ржЦрж╛ржмрж╛рж░рзЗрж░ ржкрж░рж┐ржорж╛ржг ржХржорж╛ржи'
        ]
      }
    }
  ];

  const handleGuideClick = (guide) => {
    setSelectedGuide(guide);
  };

  const handleBackToList = () => {
    setSelectedGuide(null);
  };

  const handleFeatureClick = (feature) => {
    toast({
      title: `ЁЯУЪ ${feature}`,
      description: "ЁЯЪз ржПржЗ ржлрж┐ржЪрж╛рж░ржЯрж┐ ржПржЦржиржУ ржмрж╛рж╕рзНрждржмрж╛ржпрж╝рж┐ржд рж╣ржпрж╝ржирж┐тАФржХрж┐ржирзНрждрзБ ржЪрж┐ржирзНрждрж╛ ржирзЗржЗ! ржЖржкржирж┐ ржЖржкржирж╛рж░ ржкрж░ржмрж░рзНрждрзА ржкрзНрж░ржорзНржкржЯрзЗ ржПржЯрж┐ ржЕржирзБрж░рзЛржз ржХрж░рждрзЗ ржкрж╛рж░рзЗржи! ЁЯЪА"
    });
  };

  if (selectedGuide) {
    return (
      <>
        <Helmet>
          <title>{selectedGuide.name} - Fish Care BD</title>
          <meta name="description" content={`${selectedGuide.name} ржПрж░ рж╕ржорзНржкрзВрж░рзНржг ржЪрж╛рж╖ ржкржжрзНржзрждрж┐, ржЦрж╛ржжрзНржп ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛ ржПржмржВ рж░рзЛржЧ ржкрзНрж░рждрж┐рж░рзЛржзред`} />
        </Helmet>

        <div className="min-h-screen py-8 px-4">
          <div className="max-w-4xl mx-auto">
            <Button 
              onClick={handleBackToList}
              variant="ghost"
              className="text-white hover:bg-white/20 mb-6"
            >
              тЖР рж╕ржм ржЧрж╛ржЗржбрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи
            </Button>

            <Card className="glass-effect border-white/20 mb-6">
              <CardHeader className="text-center">
                <div className="text-6xl mb-4">{selectedGuide.icon}</div>
                <CardTitle className="text-white text-3xl">{selectedGuide.name}</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-white/80 text-lg text-center">
                  {selectedGuide.details.introduction}
                </p>
              </CardContent>
            </Card>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Requirements */}
              <Card className="glass-effect border-white/20">
                <CardHeader>
                  <CardTitle className="text-white flex items-center">
                    <Droplets className="w-5 h-5 mr-2" />
                    ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ рж╢рж░рзНржд
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    {selectedGuide.details.requirements.map((req, index) => (
                      <li key={index} className="text-white/80 flex items-start">
                        <span className="text-green-400 mr-2">тАв</span>
                        {req}
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>

              {/* Feeding */}
              <Card className="glass-effect border-white/20">
                <CardHeader>
                  <CardTitle className="text-white flex items-center">
                    <Utensils className="w-5 h-5 mr-2" />
                    ржЦрж╛ржжрзНржп ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    {selectedGuide.details.feeding.map((feed, index) => (
                      <li key={index} className="text-white/80 flex items-start">
                        <span className="text-blue-400 mr-2">тАв</span>
                        {feed}
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>

              {/* Harvesting */}
              <Card className="glass-effect border-white/20">
                <CardHeader>
                  <CardTitle className="text-white flex items-center">
                    <Calendar className="w-5 h-5 mr-2" />
                    ржЖрж╣рж░ржг
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-white/80">{selectedGuide.details.harvesting}</p>
                </CardContent>
              </Card>

              {/* Problems */}
              <Card className="glass-effect border-white/20">
                <CardHeader>
                  <CardTitle className="text-white flex items-center">
                    <AlertTriangle className="w-5 h-5 mr-2" />
                    рж╕рж╛ржзрж╛рж░ржг рж╕ржорж╕рзНржпрж╛ ржУ рж╕ржорж╛ржзрж╛ржи
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    {selectedGuide.details.problems.map((problem, index) => (
                      <li key={index} className="text-white/80 flex items-start">
                        <span className="text-red-400 mr-2">тАв</span>
                        {problem}
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </>
    );
  }

  return (
    <>
      <Helmet>
        <title>ржорж╛ржЫ ржЪрж╛рж╖ ржкрж░рж╛ржорж░рзНрж╢ - Fish Care BD</title>
        <meta name="description" content="ржмрж┐ржЬрзНржЮрж╛ржирж╕ржорзНржоржд ржорж╛ржЫ ржЪрж╛рж╖рзЗрж░ рж╕ржорзНржкрзВрж░рзНржг ржЧрж╛ржЗржбред рж░рзБржЗ, ржХрж╛рждрж▓рж╛, рждрзЗрж▓рж╛ржкрж┐ржпрж╝рж╛, ржкрж╛ржЩрзНржЧрж╛рж╕ рж╕рж╣ рж╕ржХрж▓ ржорж╛ржЫрзЗрж░ ржЪрж╛рж╖ ржкржжрзНржзрждрж┐ред" />
      </Helmet>

      <div className="min-h-screen py-8 px-4">
        <div className="max-w-7xl mx-auto">
          {/* Header */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="text-center mb-8"
          >
            <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full mb-4">
              <BookOpen className="w-8 h-8 text-white" />
            </div>
            <h1 className="text-3xl md:text-4xl font-bold text-white mb-4">
              ржорж╛ржЫ ржЪрж╛рж╖ ржкрж░рж╛ржорж░рзНрж╢
            </h1>
            <p className="text-xl text-white/80 max-w-2xl mx-auto">
              ржмрж┐ржЬрзНржЮрж╛ржирж╕ржорзНржоржд ржУ рж▓рж╛ржнржЬржиржХ ржорж╛ржЫ ржЪрж╛рж╖рзЗрж░ рж╕ржорзНржкрзВрж░рзНржг ржЧрж╛ржЗржб
            </p>
          </motion.div>

          {/* Fish Guides Grid */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12"
          >
            {fishGuides.map((guide, index) => (
              <motion.div
                key={guide.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
              >
                <Card 
                  className="glass-effect border-white/20 cursor-pointer card-hover group"
                  onClick={() => handleGuideClick(guide)}
                >
                  <CardHeader className="text-center">
                    <div className="text-4xl mb-3 group-hover:scale-110 transition-transform duration-300">
                      {guide.icon}
                    </div>
                    <CardTitle className="text-white text-lg">{guide.name}</CardTitle>
                  </CardHeader>
                  <CardContent className="text-center pt-0">
                    <p className="text-white/80 text-sm">{guide.description}</p>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </motion.div>

          {/* Additional Features */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.4 }}
            className="grid grid-cols-1 md:grid-cols-3 gap-6"
          >
            <Card 
              className="glass-effect border-white/20 cursor-pointer card-hover"
              onClick={() => handleFeatureClick('ржорзМрж╕рзБржорж┐ ржкрж░рж╛ржорж░рзНрж╢')}
            >
              <CardHeader className="text-center">
                <div className="inline-flex items-center justify-center w-12 h-12 bg-gradient-to-r from-orange-500 to-red-500 rounded-full mb-3">
                  <Calendar className="w-6 h-6 text-white" />
                </div>
                <CardTitle className="text-white">ржорзМрж╕рзБржорж┐ ржкрж░рж╛ржорж░рзНрж╢</CardTitle>
              </CardHeader>
              <CardContent className="text-center pt-0">
                <p className="text-white/80 text-sm">
                  ржмрж┐ржнрж┐ржирзНржи ржЛрждрзБрждрзЗ ржорж╛ржЫ ржЪрж╛рж╖рзЗрж░ ржмрж┐рж╢рзЗрж╖ ржкрж░рж╛ржорж░рзНрж╢
                </p>
              </CardContent>
            </Card>

            <Card 
              className="glass-effect border-white/20 cursor-pointer card-hover"
              onClick={() => handleFeatureClick('ржкрзНрж░ржЬрж╛рждрж┐ рждржерзНржпржнрж╛ржирзНржбрж╛рж░')}
            >
              <CardHeader className="text-center">
                <div className="inline-flex items-center justify-center w-12 h-12 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full mb-3">
                  <Fish className="w-6 h-6 text-white" />
                </div>
                <CardTitle className="text-white">ржкрзНрж░ржЬрж╛рждрж┐ рждржерзНржпржнрж╛ржирзНржбрж╛рж░</CardTitle>
              </CardHeader>
              <CardContent className="text-center pt-0">
                <p className="text-white/80 text-sm">
                  ржмрж┐ржнрж┐ржирзНржи ржорж╛ржЫрзЗрж░ ржкрзНрж░ржЬрж╛рждрж┐рж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп
                </p>
              </CardContent>
            </Card>

            <Card 
              className="glass-effect border-white/20 cursor-pointer card-hover"
              onClick={() => handleFeatureClick('ржкрзБржХрзБрж░ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛')}
            >
              <CardHeader className="text-center">
                <div className="inline-flex items-center justify-center w-12 h-12 bg-gradient-to-r from-purple-500 to-indigo-500 rounded-full mb-3">
                  <Droplets className="w-6 h-6 text-white" />
                </div>
                <CardTitle className="text-white">ржкрзБржХрзБрж░ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛</CardTitle>
              </CardHeader>
              <CardContent className="text-center pt-0">
                <p className="text-white/80 text-sm">
                  ржкрзБржХрзБрж░ ржкрзНрж░рж╕рзНрждрзБрждрж┐ ржУ рж░ржХрзНрж╖ржгрж╛ржмрзЗржХрзНрж╖ржг
                </p>
              </CardContent>
            </Card>
          </motion.div>
        </div>
      </div>
    </>
  );
};

export default FishCareGuide;